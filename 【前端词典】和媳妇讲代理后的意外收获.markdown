## 前言
这篇文章之前是写完了，不过由于我妻子看过之后，对这篇文章的评价是：写的不错，语句是通顺的，排版是可以的，但代理是什么还是不清楚？所以我感觉之前写的是失败的，所以才有了现在这一篇。

> 接下来我会尝试面向大众，来解释“代理”的概念。


## 概念实例化
在讲代理的概念之前我先讲个类比。也是我向大人解释的过程。
![](https://user-gold-cdn.xitu.io/2019/1/11/1683d932426e5c84?w=1080&h=1320&f=jpeg&s=199299)
还好我反应机敏，要不然这个月的零花钱就要替我挡一刀了。可是我该怎么解释呢？还要让没有编程语言基础的人也听懂，伤脑筋啊！

在没有思绪的时候，她突然问我晚上吃了没有？这不就是很好的例子吗？

![](https://user-gold-cdn.xitu.io/2019/1/12/1683dc2e839c561e?w=1080&h=1696&f=jpeg&s=267986)
![](https://user-gold-cdn.xitu.io/2019/1/12/1683dc30345fa4d1?w=1080&h=1240&f=jpeg&s=162900)
![](https://user-gold-cdn.xitu.io/2019/1/12/1683dc31e185841e?w=1080&h=1212&f=jpeg&s=223422)
![](https://user-gold-cdn.xitu.io/2019/1/12/1683dc329e601221?w=1080&h=1736&f=jpeg&s=306357)
![](https://user-gold-cdn.xitu.io/2019/1/12/1683dc3382393f9b?w=1080&h=1796&f=jpeg&s=310412)
![](https://user-gold-cdn.xitu.io/2019/1/12/1683dc355ba46624?w=1080&h=1368&f=jpeg&s=280915)
![](https://user-gold-cdn.xitu.io/2019/1/12/1683dc3624ff0736?w=1080&h=1812&f=jpeg&s=278347)
![](https://user-gold-cdn.xitu.io/2019/1/12/1683dc36ea1ad3cd?w=1080&h=1724&f=jpeg&s=161733)
解释了这么久，不知道是真的懂了，还是因为太困了。不过我有钱吃肉了。

> 接下来我们正经的说说“正向代理”和“反向代理”
## 概念
首先附上正儿八经的说明图，先有一个整体的理解。
![](https://user-gold-cdn.xitu.io/2019/1/3/16813f90387855c0?w=497&h=663&f=png&s=74499)

然后很官方的解释它们的概念：

正向代理（ Forward Proxy ）：是指是一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容， 客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。 

反向代理（ Reverse Proxy ）：是指以代理服务器来接受 Internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。

> 接下来我提炼一下各自的特点。

## 特点
### 正向代理
1. 代理客户;
2. 隐藏真实的客户，为客户端收发请求，使真实客户端对服务器不可见;
3. 一个局域网内的所有用户可能被一台服务器做了正向代理，由该台服务器负责 HTTP 请求;
4. 意味着同服务器做通信的是正向代理服务器;


### 反向代理
1. 代理服务器;
2. 隐藏了真实的服务器，为服务器收发请求，使真实服务器对客户端不可见;
3. 负载均衡服务器，将用户的请求分发到空闲的服务器上;
4. 意味着用户和负载均衡服务器直接通信，即用户解析服务器域名时得到的是负载均衡服务器的 IP ;

### 共同点
1. 都是做为服务器和客户端的中间层
2. 都可以加强内网的安全性，阻止 web 攻击
3. 都可以做缓存机制

> 说了这么多，现在说说代理在工作中的时机应用场景吧。

## 实际应用
### Nginx 服务器
Nginx 服务器的功能有很多，诸如反向代理、负载均衡、静态资源服务器等。

客户端本来可以直接通过 HTTP 协议访问服务器，不过我们可以在中间加上一个 Nginx 服务器，客户端请求 Nginx 服务器，Nginx 服务器请求应用服务器，然后将结果返回给客户端，此时 Nginx  服务器就是反向代理服务器。
#### 在虚拟主机的配置中配置反向代理
```
# 虚拟主机的配置
server {
    listen 8080;                         # 监听的端口
    server_name  192.168.1.1;            # 配置访问域名
    root  /data/toor;                    # 站点根目录
    error_page 502 404 /page/404.html;   # 错误页面
    location ^~ /api/  {                        # 使用 /api/ 代理 proxy_pass 的值
        proxy_pass http://192.168.20.1:8080;    # 被代理的应用服务器 HTTP 地址
    }
}
```
以上简单的配置就可以实现反向代理的功能。

当然反向代理也可以处理跨域问题，在 Vue 中就可以使用 `proxyTable` 这个属性进行相关的配置来解决跨域问题带来的烦恼。配置如下：
```
...
proxyTable: {
    '/weixin': {
        target: 'http://192.168.48.11:8100/', // 接口的域名 
        secure: false,      // 如果是 https 接口，需要配置这个参数
        changeOrigin: true, // 如果接口跨域，需要进行这个参数配置
        pathRewrite: {
            '^/weixin': ''
        }
    },
},
...
```
#### 负载均衡的配置
```
# upstream 表示负载服务器池，定义名字为 my
upstream my {
    server 192.168.2.1:8080 weight=1 max_fails=2 fail_timeout=30s;
    server 192.168.2.2:8080 weight=1 max_fails=2 fail_timeout=30s;
    server 192.168.2.3:8080 weight=1 max_fails=2 fail_timeout=30s;
    server 192.168.2.4:8080 weight=1 max_fails=2 fail_timeout=30s;
   # 即在 30s 内尝试 2 次失败即认为主机不可用
  }
```
负载均衡即将 **请求/数据** 轮询分摊到多个服务器上执行，负载均衡的关键在于 **均匀**。

也可以通过 `ip-hash` 的方式，根据客户端 ip 地址的 hash 值将请求分配给固定的某一个服务器处理。

另外，服务器的硬件配置可能不同，配置好的服务器可以处理更多的请求，这时可以通过 `weight` 参数来控制。

以上。


## 前端词典系列
本文是《前端词典》系列的第一篇文章，这个系列会持续更新，每一期我都会讲一个出现频率较高的知识点。希望大家在阅读的过程当中可以斧正文中出现不严谨或是错误的地方，本人将不胜感激；若通过本系列而有所得，本人亦将不胜欣喜。

**内容:** 前端以及网络相关知识点的介绍并加以实际应用作为辅助。

**目的:** 这个系列的文章可以对读者起到一点帮助，解开一些迷惑。

希望各位多指点一二，不吝赐教。

## 传送门

1. [【前端词典】滚动穿透问题的解决方案](https://juejin.im/post/5c2dc9cce51d45690a254b79)
